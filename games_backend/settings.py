"""
Django settings for games_backend project.

Generated by 'django-admin startproject' using Django 4.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from urllib.parse import urlparse, unquote
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-=g8#9=w(1@^wu(y_f*0g_dabi26kq9xrqtq39#*r$zzmyw++h@"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "deepfake",
    "riskhunter",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "games_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "games_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

def _db_from_config():
    """Return DATABASES['default'] from a config file that defines DATABASE_URL.

    Config file path: BASE_DIR / '.env'
    Format: a single line like `DATABASE_URL=postgres://user:pass@host:5432/dbname`

    Raises ImproperlyConfigured if file missing or DATABASE_URL not set.
    """

    conf_path = BASE_DIR / ".env"
    database_url = None
    if not conf_path.exists():
        raise ImproperlyConfigured(
            "Missing .env. Please create it with a DATABASE_URL entry."
        )
    try:
        for raw in conf_path.read_text(encoding="utf-8").splitlines():
            line = raw.strip()
            if not line or line.startswith("#"):
                continue
            if line.upper().startswith("DATABASE_URL="):
                database_url = line.split("=", 1)[1].strip().strip('"').strip("'")
                break
    except Exception as exc:
        raise ImproperlyConfigured(f"Failed to read .env: {exc}") from exc

    if not database_url:
        raise ImproperlyConfigured("DATABASE_URL not configured in .env")

    parsed = urlparse(database_url)
    scheme = parsed.scheme.lower()

    engine_map = {
        "postgres": "django.db.backends.postgresql",
        "postgresql": "django.db.backends.postgresql",
        "postgis": "django.db.backends.postgresql",
        "mysql": "django.db.backends.mysql",
        "mariadb": "django.db.backends.mysql",
        "sqlite": "django.db.backends.sqlite3",
        "sqlite3": "django.db.backends.sqlite3",
    }

    engine = engine_map.get(scheme)
    if not engine:
        raise ImproperlyConfigured(f"Unsupported DATABASE_URL scheme: {scheme}")

    if engine.endswith("sqlite3"):
        # For sqlite, path may be like sqlite:///path/to/db.sqlite3 or sqlite://:memory:
        path = parsed.path or ""
        if path.startswith("/"):
            name = unquote(path)
        else:
            name = ":memory:" if path == ":memory:" else str(BASE_DIR / "db.sqlite3")
        return {"ENGINE": engine, "NAME": name}

    return {
        "ENGINE": engine,
        "NAME": unquote(parsed.path.lstrip("/")),
        "USER": unquote(parsed.username or ""),
        "PASSWORD": unquote(parsed.password or ""),
        "HOST": parsed.hostname or "",
        "PORT": str(parsed.port or ""),
    }

    # unreachable
    raise ImproperlyConfigured("DATABASE_URL parsing failed")


DATABASES = {"default": _db_from_config()}

# Fail fast if database is unreachable
def _ensure_db_connection():
    from django.db import connections
    try:
        conn = connections["default"]
        conn.ensure_connection()
    except Exception as exc:  # django.db.utils.OperationalError and others
        raise ImproperlyConfigured(f"Database connection failed: {exc}") from exc

_ensure_db_connection()


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
